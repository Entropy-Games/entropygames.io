var __awaiter=this&&this.__awaiter||function(n,t,o,i){return new(o||(o=Promise))((function(r,e){function s(n){try{u(i.next(n))}catch(n){e(n)}}function l(n){try{u(i.throw(n))}catch(n){e(n)}}function u(n){var t;n.done?r(n.value):(t=n.value,t instanceof o?t:new o((function(n){n(t)}))).then(s,l)}u((i=i.apply(n,t||[])).next())}))};import{builtInFunctions}from"./builtInFunctions.js";import{ESError,ImportError,TypeError}from"./errors.js";import{Position}from"./position.js";import{run}from"./index.js";import{global,globalConstants,setNone}from"./constants.js";import{str}from"./util.js";import{ESFunction,ESString}from"./primitiveTypes.js";export function initialise(n,t,o,i=[]){builtInFunctions.import=t=>{if(!(t instanceof ESString))return new TypeError(Position.unknown,"Number",t.typeOf().valueOf(),t.valueOf());const o=t.valueOf();if(!o)return function(n="Import Failed"){return new ImportError(Position.unknown,o,n+". Remember that relative URLs are only allowed with node.js")}("No URL given");if(/^https?:\/\//i.test(o))fetch(o).then((t=>__awaiter(this,void 0,void 0,(function*(){const o=yield run(yield t.text(),{env:n});o.error&&console.log(o.error.str)}))));else try{import("fs").then((t=>__awaiter(this,void 0,void 0,(function*(){try{const i=t.readFileSync(o,{encoding:"utf8"}),r=yield run(i,{env:n});r.error&&console.log(r.error.str)}catch(n){console.log(n),console.log(new ImportError(Position.unknown,o,`\n                        Could not import file ${o}: ${n.toString()}`).str)}}))))}catch(n){return new ImportError(Position.unknown,`\n                Could not import file ${o}: ${n}\n            `)}},builtInFunctions.print=(...n)=>__awaiter(this,void 0,void 0,(function*(){let o="> ";for(let t of n)o+=str(t);t(o)})),builtInFunctions.input=(n,t)=>__awaiter(this,void 0,void 0,(function*(){o(n.valueOf(),(n=>{let o=null==t?void 0:t.valueOf();if(o instanceof ESFunction){let t=o.__call__([new ESString(n)],global);t instanceof ESError&&console.log(t.str)}else"function"==typeof o&&o(n);return new ESString("'input()' does not return anything. Pass in a function as the second argument, which will take the user input as an argument.")}))}));for(let t in builtInFunctions)n.set(t,new ESFunction(builtInFunctions[t],[],t),{global:!0,isConstant:!0});for(let t in globalConstants){const o=globalConstants[t];n.set(t,o,{global:!0,isConstant:!0}),"undefined"===t&&setNone(o.valueOf())}for(let n of i)builtInFunctions.import(n);n.libs=i,n.initialisedAsGlobal=!0}