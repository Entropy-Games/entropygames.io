import{ESError,TypeError}from"./errors.js";import{Position}from"./position.js";import{ESArray,ESNumber}from"./primitiveTypes.js";export const builtInFunctions={range:r=>{if(!(r instanceof ESNumber))return new TypeError(Position.unknown,"Number",r.typeOf().valueOf(),r.valueOf());const e=r.valueOf();try{return new ESArray([...Array(e).keys()].map((r=>new ESNumber(r))))}catch(e){return new ESError(Position.unknown,"RangeError",`Cannot make range of length '${r.str()}'`)}},log:(...r)=>{console.log(...r.map((r=>r.str().valueOf())))},parseNum:r=>{try{const e=parseFloat(r.str().valueOf());return isNaN(e)?new ESNumber:new ESNumber(e)}catch(e){return new TypeError(Position.unknown,"String",r.typeOf().valueOf(),r.valueOf(),"This string is not parseable as a number")}}};